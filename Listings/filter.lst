C51 COMPILER V9.60.0.0   FILTER                                                            04/07/2023 21:29:42 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE FILTER
OBJECT MODULE PLACED IN .\Objects\filter.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE filter.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\others) DEBUG OBJECTEXTEND PR
                    -INT(.\Listings\filter.lst) TABS(2) OBJECT(.\Objects\filter.obj)

line level    source

   1          #include "filter.h"
   2          
   3          void swap(uint16_t *a, uint16_t *b)
   4          {
   5   1        uint16_t c = *a;
   6   1        *a = *b;
   7   1        *b = c;
   8   1      }
   9          
  10          /* 只是一个很简陋的中值滤波，返回数据集的中位数，
  11             不过请注意，传入的数据只能是3个，不能多也不能少，
  12             虽然简陋，但是用在温度、超声波、adc、频率的读取，
  13             效果都是很稳定的，可以从软件层面上
  14             解决数据偶尔读取错误的问题 */
  15          uint16_t median_filter(uint16_t *Data)
  16          {
  17   1        uint16_t temp;
  18   1        
  19   1        temp = MAX(*(Data + 0), *(Data + 1));
  20   1        if (temp <= *(Data + 2))
  21   1          return temp;
  22   1        else
  23   1        {
  24   2          temp = MIN(*(Data + 0), *(Data + 1));
  25   2          return MAX(temp, *(Data + 2));
  26   2        }
  27   1      }
  28          
  29          ///* 简单的冒泡排序 */
  30          //void sort(uint16_t *Data, uint16_t len)
  31          //{
  32          //  int i, j;
  33          //  
  34          //  for (i = 0; i < len; i++)
  35          //  {
  36          //    for (j = i + 1; j < len; j++)
  37          //    {
  38          //      if (*(Data + i) > *(Data + j))
  39          //        swap((Data + i), (Data + j));
  40          //    }
  41          //  }
  42          //}
  43          
  44          ///* 只是一个简单的中值滤波，返回这些数据的中位数 */
  45          //uint16_t median_filter(uint16_t *Data, uint16_t len)
  46          //{
  47          //  uint16_t Data_bak[20];
  48          //  uint16_t Data_out;
  49          //  uint32_t sum = 0;
  50          //  
  51          //  memcpy(Data_bak, Data, sizeof(uint16_t) * len);
  52          //  
  53          //  sort(Data_bak, len);
  54          //  
C51 COMPILER V9.60.0.0   FILTER                                                            04/07/2023 21:29:42 PAGE 2   

  55          //  Data_out = Data_bak[len - (len / 2)];
  56          //  
  57          //  return Data_out;
  58          //}
  59          
  60          /* 只是一个简单的均值滤波，计算平均值 */
  61          uint16_t average_filter(uint16_t *Data, uint16_t len)
  62          {
  63   1        uint32_t sum = 0;
  64   1        uint16_t i;
  65   1        
  66   1        for (i = 0; i < len; i++)
  67   1          sum += *(Data + i);
  68   1        
  69   1        return sum / len;
  70   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    270    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      16
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
