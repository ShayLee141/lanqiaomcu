C51 COMPILER V9.60.0.0   TIM                                                               03/13/2023 15:35:15 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE TIM
OBJECT MODULE PLACED IN .\Objects\tim.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE tim.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\tim.l
                    -st) TABS(2) OBJECT(.\Objects\tim.obj)

line level    source

   1          #include "tim.h"
   2          
   3          /*************  本地常量声明    **************/
   4          uint8_t code t_display[]={                       //标准字库
   5          //   0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
   6              0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71,
   7          //black  -     H    J    K    L    N    o   P    U     t    G    Q    r   M    y
   8              0x00,0x40,0x76,0x1E,0x70,0x38,0x37,0x5C,0x73,0x3E,0x78,0x3d,0x67,0x50,0x37,0x6e,
   9          //   0.   1.   2.   3.   4.   5.   6.   7.   8.   9.   -1
  10              0xBF,0x86,0xDB,0xCF,0xE6,0xED,0xFD,0x87,0xFF,0xEF,0x46};
  11          
  12          uint8_t code T_COM[]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};      //位码
  13          
  14          void Timer0Init(void) //使用定时器0对超声波收发时间计时
  15          {
  16   1        AUXR &= ~0x80; //定时器时钟12T模式，每一次计数为1微秒
  17   1        TMOD &= 0xF0;   //设置定时器模式
  18   1      }
  19          
  20          void Timer1Init(void)   //10微秒@12.000MHz
  21          {
  22   1        AUXR |= 0x40;   //定时器时钟1T模式
  23   1        TMOD &= 0x0F;   //设置定时器模式
  24   1        TL1 = 0x88;   //设置定时初始值
  25   1        TH1 = 0xFF;   //设置定时初始值
  26   1        TF1 = 0;    //清除TF1标志
  27   1        TR1 = 1;    //定时器1开始计时
  28   1      }
  29          
  30          //void Timer1Init(void)   //100微秒@12.000MHz
  31          //{
  32          //  AUXR |= 0x40;   //定时器时钟1T模式
  33          //  TMOD &= 0x0F;   //设置定时器模式
  34          //  TL1 = 0x50;   //设置定时初始值
  35          //  TH1 = 0xFB;   //设置定时初始值
  36          //  TF1 = 0;    //清除TF1标志
  37          //  TR1 = 1;    //定时器1开始计时
  38          //}
  39          
  40          //void TimerPCAInit(void) //尝试用脉冲捕获来写超声波
  41          //{
  42          //  
  43          //}
  44          
  45          uint8_t dig_com = 0; //当前显示的数码管位
  46          uint8_t dig_all[SCREEN_NUM][8] = 
  47          {
  48            { 16, 16, 16, 16, 16, 16, 16, 16, },  //黑屏界面
  49            { 2, 0, 2, 3, 0, 1, 1, 6, },          //测试界面
  50            { 0x0C, 16, 16, 16, 16, 16, 2, 6, },  //温度界面
  51            { 2, 3, 17, 5, 9, 17, 5, 5, },  //时间界面
  52            { 0x0F, 16, 1, 1, 4, 5, 1, 4, },  //频率界面
  53          }; //这些初值都是可以更改的
  54          uint8_t *dig = dig_all[0]; //当前显示界面
C51 COMPILER V9.60.0.0   TIM                                                               03/13/2023 15:35:15 PAGE 2   

  55          
  56          uint8_t led_state = 0; //每个led的状态
  57          uint8_t led_pwm_cnt = 0;  //led的pwm计数器
  58          uint8_t led_pwm_duty = 100; //led的pwm占空比，默认满占空比
  59          uint8_t led_pwm_period = 100; //led的pwm周期（单位就是定时器的周期，这里是10us）
  60          
  61          /* 大功率外设状态
  62             bit 0 - 3为步进电机驱动输出
  63             bit 4为继电器输出
  64             bit 5为电机驱动输出
  65             bit 6为蜂鸣器输出 */
  66          uint8_t high_power_state = 0;
  67          
  68          uint8_t Timer1ms_cnt = 0;
  69          uint8_t Timer10ms_cnt = 0;
  70          uint8_t Timer200ms_cnt = 0;
  71          uint16_t Timer1s_cnt = 0;
  72          
  73          void Timer1Isr(void) interrupt 3 //10us一周期
  74          {
  75   1        if (++Timer1ms_cnt >= 100) //1ms
  76   1        {
  77   2          Timer1ms_cnt = 0;
  78   2          
  79   2          Timer10ms_cnt++;
  80   2          Timer200ms_cnt++;
  81   2          Timer1s_cnt++;
  82   2          
  83   2          { //数码管
  84   3            CHANNLE(6, 0x00);
  85   3            CHANNLE(7, ~t_display[dig[dig_com]]); //关键步骤
  86   3            CHANNLE(6, T_COM[dig_com]); //关键步骤
  87   3            if (++dig_com >= 8)
  88   3            {
  89   4              dig_com = 0;
  90   4            }
  91   3          }
  92   2          
  93   2          //大功率外设
  94   2          CHANNLE(5, high_power_state);
  95   2        }
  96   1        
  97   1        { //LED_PWM
  98   2          if (led_pwm_cnt < led_pwm_duty) //有效电平
  99   2          {
 100   3            CHANNLE(4, ~led_state);
 101   3          }
 102   2          else //无效电平
 103   2          {
 104   3            CHANNLE(4, 0xFF); //关闭LED
 105   3          }
 106   2          if (++led_pwm_cnt >= led_pwm_period)
 107   2          {
 108   3            led_pwm_cnt = 0;
 109   3          }
 110   2        }
 111   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    199    ----
   CONSTANT SIZE    =     51    ----
C51 COMPILER V9.60.0.0   TIM                                                               03/13/2023 15:35:15 PAGE 3   

   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     54    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
