C51 COMPILER V9.60.0.0   BASE                                                              03/20/2023 12:55:59 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE BASE
OBJECT MODULE PLACED IN .\Objects\base.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE base.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\others) DEBUG OBJECTEXTEND PRIN
                    -T(.\Listings\base.lst) TABS(2) OBJECT(.\Objects\base.obj)

line level    source

   1          #include "base.h"
   2          
   3          /* NE555频率计数器 */
   4          void Timer0Init(void)
   5          {
   6   1        TMOD &= 0xF0; //定时器0模式复位
   7   1        TMOD |= 0x04; //设置为计数模式，计数引脚为P34
   8   1        TL0 = 0x00;   //复位初始值
   9   1        TH0 = 0x00;   //复位初始值
  10   1        TF0 = 0;      //清除TF0标志
  11   1        TR0 = 1;      //定时器0开始计时
  12   1      }
  13          
  14          /* ledpwm、数码管、继电器、蜂鸣器，以及各种周期延时均使用这个定时器 */
  15          void Timer1Init(void)   //10微秒@12.000MHz
  16          {
  17   1        AUXR |= 0x40;   //定时器时钟1T模式
  18   1        TMOD &= 0x0F;   //设置定时器模式
  19   1        TL1 = 0x88;   //设置定时初始值
  20   1        TH1 = 0xFF;   //设置定时初始值
  21   1        TF1 = 0;    //清除TF1标志
  22   1        TR1 = 1;    //定时器1开始计时
  23   1        ET1 = 1;
  24   1      }
  25          
  26          /*************  本地常量声明    **************/
  27          uint8_t code t_display[]={                       //标准字库
  28          //   0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
  29              0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71,
  30          //black  -     H    J    K    L    N    o   P    U     t    G    Q    r   M    y
  31              0x00,0x40,0x76,0x1E,0x70,0x38,0x37,0x5C,0x73,0x3E,0x78,0x3d,0x67,0x50,0x37,0x6e,
  32          //   0.   1.   2.   3.   4.   5.   6.   7.   8.   9.   -1
  33              0xBF,0x86,0xDB,0xCF,0xE6,0xED,0xFD,0x87,0xFF,0xEF,0x46};
  34          
  35          uint8_t code T_COM[]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};      //位码
  36          
  37          uint8_t dig_com = 0; //当前显示的数码管位
  38          uint8_t xdata dig_all[SCREEN_NUM][8] = 
  39          {
  40            { 16, 16, 16, 16, 16, 16, 16, 16, },  //黑屏界面
  41            { 0x0C, 16, 16, 16, 16, 16, 2, 6, },  //温度界面
  42            { 16, 16, 17, 16, 16, 17, 16, 16, },  //时钟界面
  43            { 16, 16, 16, 16, 16, 16, 16, 16, },  //日期界面
  44            { 0x0F, 16, 16, 16, 16, 16, 16, 16, },  //频率界面
  45            { 16, 16, 16, 16, 16, 16, 16, 16, },  //AD/DA界面
  46          }; //这些初值都是可以更改的
  47          uint8_t *dig = dig_all[0]; //当前显示界面
  48          uint8_t dig_switch = 0xFF; //数码管每一位的开关
  49          
  50          uint8_t led_state = 0; //每个led的状态
  51          uint8_t led_pwm_cnt = 0;  //led的pwm计数器
  52          uint8_t led_pwm_duty = 100; //led的pwm占空比，默认满占空比
  53          uint8_t led_pwm_period = 100; //led的pwm周期（单位就是定时器的周期，这里是10us）
  54          
C51 COMPILER V9.60.0.0   BASE                                                              03/20/2023 12:55:59 PAGE 2   

  55          /* 大功率外设状态 */
  56          uint8_t high_power_state = 0;
  57          
  58          /* 虚拟定时器 */
  59          uint8_t Timer10ms_cnt = 10;
  60          uint8_t Timer50ms_cnt = 50;
  61          uint8_t Timer100ms_cnt = 100;
  62          uint8_t Timer200ms_cnt = 200;
  63          uint16_t Timer1s_cnt = 1000;
  64          uint16_t ne555_cnt = 100; //ne555专用的定时器，可以调整采样周期
  65          
  66          /* NE555频率 */
  67          uint16_t ne555_out = 0;
  68          
  69          void Timer1Isr(void) interrupt 3 //10us一周期
  70          {
  71   1        static uint8_t Timer1ms_cnt = 100;
  72   1        
  73   1        if (++Timer1ms_cnt >= 100) //1ms
  74   1        {
  75   2          Timer1ms_cnt = 0;
  76   2          
  77   2          Timer10ms_cnt++;
  78   2          Timer50ms_cnt++;
  79   2          Timer100ms_cnt++;
  80   2          Timer200ms_cnt++;
  81   2          Timer1s_cnt++;
  82   2          ne555_cnt++;
  83   2          
  84   2          { //数码管
  85   3            CHANNLE(6, 0x00);
  86   3            if (dig_switch & (1 << dig_com)) //根据这一位数码管开关来决定是否显示
  87   3            {
  88   4              CHANNLE(7, ~t_display[dig[dig_com]]); //关键步骤
  89   4              CHANNLE(6, T_COM[dig_com]); //关键步骤
  90   4            }
  91   3            
  92   3            if (++dig_com >= 8)
  93   3            {
  94   4              dig_com = 0;
  95   4            }
  96   3          }
  97   2          
  98   2          //大功率外设
  99   2          CHANNLE(5, high_power_state);
 100   2        }
 101   1        
 102   1        { //LED_PWM
 103   2          if (led_pwm_cnt < led_pwm_duty) //有效电平
 104   2          {
 105   3            CHANNLE(4, ~led_state);
 106   3          }
 107   2          else //无效电平
 108   2          {
 109   3            CHANNLE(4, 0xFF); //关闭LED
 110   3          }
 111   2          if (++led_pwm_cnt >= led_pwm_period)
 112   2            led_pwm_cnt = 0;
 113   2        }
 114   1        
 115   1        if (ne555_cnt >= 100)
 116   1        {
C51 COMPILER V9.60.0.0   BASE                                                              03/20/2023 12:55:59 PAGE 3   

 117   2          ne555_cnt = 0;
 118   2          
 119   2          TR0 = 0;    //定时器0暂停计数
 120   2          ne555_out = TH0;
 121   2          ne555_out <<= 8;
 122   2          ne555_out |= TL0;
 123   2          TL0 = 0x00; //复位初始值
 124   2          TH0 = 0x00; //复位初始值
 125   2          TR0 = 1;    //定时器0开始计数
 126   2          ne555_out *= 10;
 127   2        }
 128   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    326    ----
   CONSTANT SIZE    =     51    ----
   XDATA SIZE       =     48    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     21    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
