C51 COMPILER V9.60.0.0   ULTRASONIC                                                        04/06/2023 17:23:19 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE ULTRASONIC
OBJECT MODULE PLACED IN .\Objects\ultrasonic.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ultrasonic.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\others) DEBUG OBJECTEXTEN
                    -D PRINT(.\Listings\ultrasonic.lst) TABS(2) OBJECT(.\Objects\ultrasonic.obj)

line level    source

   1          #include "ultrasonic.h"
   2          
   3          /* 如果你发现测距的量程很短，那你应该看看
   4             下载的时候IRC频率有没有调成12.000MHz，
   5             而不是来质疑我的代码 (>w<) */
   6          void Delay13us()    //@12.000MHz
   7          {
   8   1        unsigned char i;
   9   1      
  10   1        _nop_();
  11   1        _nop_();
  12   1        i = 36;
  13   1        while (--i);
  14   1      }
  15          
  16          void TimerPCAInit()
  17          {
  18   1        CCON = 0; //初始化PCA控制寄存器
  19   1                  //PCA定时器停止
  20   1                  //清除CF标志
  21   1                  //清除模块中断标志
  22   1        CMOD = 0x01;    //设置PCA时钟源 1MHz
  23   1                        //开启PCA定时器溢出中断
  24   1        CCAPM0 = 0x11;  //PCA模块0为下降沿触发
  25   1                        //利用脉冲捕获来模拟P11下降沿外部中断
  26   1      }
  27          
  28          uint16_t distance = 0;
  29          /* ultrasonic_flag 超声波状态标志
  30             0：空闲阶段
  31             1：发送阶段
  32             2：确认接收到返回的超声波
  33             3：接收不到超声波，或超出量程 */
  34          uint8_t ultrasonic_flag = 0;
  35          static const uint16_t C_DEF = 65535 - RANGE_LIMIT / 0.017;
  36          static const uint8_t CH_DEF = (uint16_t)(65535 - RANGE_LIMIT / 0.017) >> 8;
  37          static const uint8_t CL_DEF = (uint16_t)(65535 - RANGE_LIMIT / 0.017) & 0x00FF;
  38          
  39          /* P11，即超声波RX，一旦出现下降沿，
  40             则说明已经收到返回的超声波，进入此中断 */
  41          void TimerPCAIsr() interrupt 7
  42          {
  43   1        CR = 0; //优先结束计时
  44   1        
  45   1        if (ultrasonic_flag == 1)
  46   1        {
  47   2          if (CCF0) /* 接收到返回的超声波 */
  48   2            ultrasonic_flag = 2; //这句是关键
  49   2          else if (CF) /* 超出量程 */
  50   2            ultrasonic_flag = 3; //这句是关键
  51   2          else
  52   2            ultrasonic_flag = 0; //意外情况
  53   2        }
  54   1        
C51 COMPILER V9.60.0.0   ULTRASONIC                                                        04/06/2023 17:23:19 PAGE 2   

  55   1        CF = 0;
  56   1        CCF0 = 0;
  57   1        CCF1 = 0; //这两个标志位虽然没有用到
  58   1        CCF2 = 0; //但是以防万一，导致中断卡住
  59   1      }
  60          
  61          /* 超声波发送 */
  62          void sand_ultrasonic()
  63          { //计时在前还是发送在前都可以，在我的板子上我发现计时在前的数据比较准确
  64   1        /* 启动计时 */
  65   1        CH = CH_DEF;    //设置定时初始值
  66   1        CL = CL_DEF;    //设置定时初始值
  67   1        /* 经过测试，板子能测的最长距离是4米（至少我这块板子是这样），
  68   1           而定时器的理论量程远超4米，所以设置初值的意义在于缩短量程
  69   1           （大概缩减到5米），以此来减少不必要的测量时间，
  70   1           所以超声波传播的时间就是终值减初值 */
  71   1        CF = 0;   //清除CF标志
  72   1        
  73   1        /* 启动超声波发送 */
  74   1        EA = 0; //关闭中断，防止打断发送
  75   1        CR = 1; //定时器开始计时
  76   1        P10 = 1; Delay13us(); P10 = 0; Delay13us(); //高电平在前低电平在后
  77   1        P10 = 1; Delay13us(); P10 = 0; Delay13us();
  78   1        P10 = 1; Delay13us(); P10 = 0; Delay13us();
  79   1        P10 = 1; Delay13us(); P10 = 0; Delay13us();
  80   1        P10 = 1; Delay13us(); P10 = 0; Delay13us();
  81   1        P10 = 1; Delay13us(); P10 = 0; Delay13us();
  82   1        P10 = 1; Delay13us(); P10 = 0; Delay13us();
  83   1        P10 = 1; Delay13us(); P10 = 0;
  84   1        EA = 1; //重新打开中断
  85   1      }
  86          
  87          /* 计算距离 */
  88          void calculate_distance()
  89          {
  90   1        if (ultrasonic_flag == 2) //确认接收到返回的超声波
  91   1        {
  92   2      //    distance = CCAP0H;
  93   2      //    distance <<= 8;
  94   2      //    distance |= CCAP0L;
  95   2      //    distance -= C_DEF; //减掉定时器初值，减去初值原因在设置初值的地方有注解
  96   2      //    distance = (float)distance * 0.017;
  97   2          distance = ((CCAP0H << 8 | CCAP0L) - C_DEF) * 0.017;
  98   2        }
  99   1        else //接收不到超声波，或超出量程
 100   1        {
 101   2          distance = DISTANCE_OUTRANG;
 102   2        }
 103   1      }
 104          
 105          /* 读取距离函数
 106             不一定需要这么写
 107             可以更据上面两个函数自行修改 */
 108          void read_distance()
 109            { //可能你会觉得这个函数写的不好，但这应该是最简单的写法了
 110   1        if (ultrasonic_flag > 1)
 111   1        {
 112   2          calculate_distance();
 113   2          ultrasonic_flag = 0; //进入发送阶段
 114   2        }
 115   1        
 116   1        if (ultrasonic_flag == 0)
C51 COMPILER V9.60.0.0   ULTRASONIC                                                        04/06/2023 17:23:19 PAGE 3   

 117   1        {
 118   2          sand_ultrasonic();
 119   2          ultrasonic_flag = 1; //进入发送阶段
 120   2        }
 121   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    196    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      7    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
